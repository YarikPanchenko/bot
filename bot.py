import telebot
from telebot import types
import pandas as pd
from datetime import datetime, timedelta
import schedule
import time
import threading
import traceback
import os

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –±–æ—Ç–∞
TOKEN = ''
MAIN_ADMIN_IDS = []

bot = telebot.TeleBot(TOKEN)


# –•—Ä–∞–Ω–∏–ª–∏—â–∞ –¥–∞–Ω–Ω—ã—Ö –≤ –ø–∞–º—è—Ç–∏
class DataStorage:
    def __init__(self):
        self.user_data = {}
        self.event_registrations = []
        self.vacancy_applications = []
        self.admins = {admin_id: 'main' for admin_id in MAIN_ADMIN_IDS}
        self.mailing_settings = {
            'enabled': True,
            'day_of_week': 6,  # 6 - –≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ (0 - –ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫)
            'time': '12:00'
        }
        self.subscribed_users = set()
        self.parsed_messages = set()
        self.channels_to_monitor = set()
        # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–µ –ø–æ–ª—è –¥–ª—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π
        self.reminder_text = None
        self.reminder_frequency = 1  # 1 - —Ä–∞–∑ –≤ –Ω–µ–¥–µ–ª—é, 2 - —Ä–∞–∑ –≤ 2 –Ω–µ–¥–µ–ª–∏, 3 - —Ä–∞–∑ –≤ 3 –Ω–µ–¥–µ–ª–∏
        self.last_reminder_sent = None

storage = DataStorage()


class UserData:
    def __init__(self):
        self.name = None
        self.phone = None
        self.event_or_vacancy = None
        self.needs_pass = None
        self.about = None
        self.cv_file_id = None
        self.option = None
        self.step = None
        self.reviewing = False
        self.username = None  # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª–µ –¥–ª—è username

    def get_summary(self):
        if self.option == 'event':
            return (
                f"‚úÖ –í–∞—à–∞ –∞–Ω–∫–µ—Ç–∞ –Ω–∞ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ:\n\n"
                f"üìå –§–ò–û: {self.name}\n"
                f"üë§ Username: @{self.username if self.username else '–Ω–µ —É–∫–∞–∑–∞–Ω'}\n"
                f"üì± –¢–µ–ª–µ—Ñ–æ–Ω: {self.phone}\n"
                f"üéØ –ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ: {self.event_or_vacancy}\n"
                f"ü™™ –ü—Ä–æ–ø—É—Å–∫: {'–î–∞' if self.needs_pass else '–ù–µ—Ç'}"
            )
        else:
            return (
                f"‚úÖ –í–∞—à–∞ –∞–Ω–∫–µ—Ç–∞ –Ω–∞ –≤–∞–∫–∞–Ω—Å–∏—é:\n\n"
                f"üìå –§–ò–û: {self.name}\n"
                f"üë§ Username: @{self.username if self.username else '–Ω–µ —É–∫–∞–∑–∞–Ω'}\n"
                f"üì± –¢–µ–ª–µ—Ñ–æ–Ω: {self.phone}\n"
                f"üíº –í–∞–∫–∞–Ω—Å–∏—è: {self.event_or_vacancy}\n"
                f"üìù –û —Å–µ–±–µ: {self.about}\n"
                f"üìé CV: {'–ü—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω–æ' if self.cv_file_id else '–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç'}"
            )


def is_admin(user_id) :
    return str(user_id) in storage.admins


def is_main_admin(user_id):
    return str(user_id) in MAIN_ADMIN_IDS


def schedule_mailing() :
    schedule.clear()
    if storage.mailing_settings['enabled'] :
        days = ['monday', 'tuesday', 'wednesday', 'thursday', 'friday', 'saturday', 'sunday']
        day_name = days[storage.mailing_settings['day_of_week']]
        getattr(schedule.every(), day_name).at(storage.mailing_settings['time']).do(send_weekly_report)
        print(f"–†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∞ –Ω–∞ –∫–∞–∂–¥—ã–π {day_name} –≤ {storage.mailing_settings['time']}")


def send_weekly_report() :
    try :
        if not storage.event_registrations :
            return

        df = pd.DataFrame(storage.event_registrations)
        week_ago = datetime.now() - timedelta(days=7)
        df['–î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏'] = pd.to_datetime(df['–î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏'])
        weekly_data = df[df['–î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏'] >= week_ago]

        if weekly_data.empty :
            return

        filename = f"weekly_registrations_{datetime.now().strftime('%Y-%m-%d')}.xlsx"
        weekly_data.to_excel(filename, index=False)

        for admin_id in list(storage.admins.keys()) :
            try :
                with open(filename, 'rb') as file :
                    bot.send_document(admin_id, file, caption="üìä –ï–∂–µ–Ω–µ–¥–µ–ª—å–Ω—ã–π –æ—Ç—á—ë—Ç –ø–æ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è–º")
            except Exception as e :
                print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –æ—Ç—á—ë—Ç–∞ –∞–¥–º–∏–Ω—É {admin_id}: {str(e)}")

        os.remove(filename)
    except Exception as e :
        print(f"–û—à–∏–±–∫–∞ –≤ send_weekly_report: {str(e)}")
        traceback.print_exc()


def mailing_scheduler_thread() :
    while True :
        try :
            schedule.run_pending()
            time.sleep(1)
        except Exception as e :
            print(f"–û—à–∏–±–∫–∞ –≤ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–µ: {str(e)}")
            time.sleep(5)


def user_menu(chat_id) :
    try :
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
        btn1 = types.KeyboardButton('–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –Ω–∞ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ')
        btn2 = types.KeyboardButton('–ü—Ä–∏—Å–ª–∞—Ç—å CV –¥–ª—è –≤–∞–∫–∞–Ω—Å–∏–∏')
        markup.add(btn1, btn2)
        bot.send_message(chat_id, "üëã –ü—Ä–∏–≤–µ—Ç! –≠—Ç–æ –±–æ—Ç  –º—ã –∞–∫—Ç–∏–≤–Ω–æ –¥–µ–ª–∏–º—Å—è —É–Ω–∏–∫–∞–ª—å–Ω—ã–º–∏ –≤–∞–∫–∞–Ω—Å–∏—è–º–∏, –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è–º–∏, –∞ —Ç–∞–∫–∂–µ –æ—Ä–≥–∞–Ω–∏–∑—É–µ–º –∫–µ–π—Å-—á–µ–º–ø–∏–æ–Ω–∞—Ç—ã.\n–ß—Ç–æ –≤–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç?", reply_markup=markup)
    except Exception as e :
        handle_error(chat_id, e)


def admin_menu(message) :
    try :
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True)

        if is_main_admin(message.chat.id) :
            buttons = [
                'üìä –ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–π',
                'üìß –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ä–∞—Å—Å—ã–ª–∫–æ–π',
                'üë• –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º–∏',
                '‚è∞ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è–º–∏','üì¢ –°—Ç–∞—Ç—É—Å –ø–∞—Ä—Å–∏–Ω–≥–∞'
            ]
        else :
            buttons = ['üìä –ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–π']

        for button in buttons :
            markup.add(types.KeyboardButton(button))

        bot.send_message(message.chat.id, "üõ† –ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:", reply_markup=markup)
    except Exception as e :
        handle_error(message.chat.id, e)


def handle_error(chat_id, error) :
    error_msg = f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.\n–û—à–∏–±–∫–∞: {str(error)}"
    print(error_msg)
    traceback.print_exc()
    try :
        bot.send_message(chat_id, "‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
    except :
        pass


@bot.message_handler(commands=['start'])
def send_welcome(message):
    try:
        if is_admin(message.chat.id):
            admin_menu(message)
        else:
            storage.subscribed_users.add(message.chat.id)
            user_menu(message.chat.id)
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è—Ö
            bot.send_message(
                message.chat.id,
                "üîî –í—ã –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∞ —Ä–∞—Å—Å—ã–ª–∫—É –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π –∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π. "
                "–ß—Ç–æ–±—ã –æ—Ç–ø–∏—Å–∞—Ç—å—Å—è, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /unsubscribe"
            )
    except Exception as e:
        handle_error(message.chat.id, e)


@bot.message_handler(commands=['unsubscribe'])
def unsubscribe(message):
    try:
        if message.chat.id in storage.subscribed_users:
            storage.subscribed_users.remove(message.chat.id)
            bot.send_message(message.chat.id, "üîï –í—ã –æ—Ç–ø–∏—Å–∞–ª–∏—Å—å –æ—Ç —Ä–∞—Å—Å—ã–ª–∫–∏ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π –∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π.")
        else:
            bot.send_message(message.chat.id, "‚ÑπÔ∏è –í—ã –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∞ —Ä–∞—Å—Å—ã–ª–∫—É.")
    except Exception as e:
        handle_error(message.chat.id, e)


@bot.message_handler(commands=['add_channel_id'])
def add_channel_by_id(message) :
    if not is_main_admin(message.chat.id) :
        bot.reply_to(message, "‚ùå –≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –≥–ª–∞–≤–Ω–æ–º—É –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É")
        return

    try :
        args = message.text.split()
        if len(args) < 2 :
            bot.reply_to(message, "‚ùå –£–∫–∞–∂–∏—Ç–µ ID –∫–∞–Ω–∞–ª–∞: /add_channel_id [ID_–∫–∞–Ω–∞–ª–∞]")
            return

        channel_id = args[1]

        if not channel_id.lstrip('-').isdigit() :
            bot.reply_to(message, "‚ùå ID –∫–∞–Ω–∞–ª–∞ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º")
            return

        channel_id = int(channel_id)

        try :
            chat = bot.get_chat(channel_id)
            if chat.type != 'channel' :
                bot.reply_to(message, "‚ùå –£–∫–∞–∑–∞–Ω–Ω—ã–π ID –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –∫–∞–Ω–∞–ª–æ–º")
                return

            chat_member = bot.get_chat_member(channel_id, bot.get_me().id)
            if chat_member.status not in ['administrator', 'creator'] :
                bot.reply_to(message, "‚ùå –ë–æ—Ç –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º —ç—Ç–æ–≥–æ –∫–∞–Ω–∞–ª–∞")
                return

            storage.channels_to_monitor.add(channel_id)
            bot.reply_to(message, f"‚úÖ –ö–∞–Ω–∞–ª {chat.title} (ID: {channel_id}) –¥–æ–±–∞–≤–ª–µ–Ω –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞")
        except Exception as e :
            bot.reply_to(message, f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")
    except Exception as e :
        handle_error(message.chat.id, e)


@bot.message_handler(commands=['add_channel'])
def add_channel(message) :
    if not is_main_admin(message.chat.id) :
        bot.reply_to(message, "‚ùå –≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –≥–ª–∞–≤–Ω–æ–º—É –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É")
        return

    try :
        if message.forward_from_chat and message.forward_from_chat.type == 'channel' :
            channel_id = message.forward_from_chat.id

            try :
                chat_member = bot.get_chat_member(channel_id, bot.get_me().id)
                if chat_member.status not in ['administrator', 'creator'] :
                    bot.reply_to(message, "‚ùå –ë–æ—Ç –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º —ç—Ç–æ–≥–æ –∫–∞–Ω–∞–ª–∞")
                    return

                storage.channels_to_monitor.add(channel_id)
                bot.reply_to(message,
                             f"‚úÖ –ö–∞–Ω–∞–ª {message.forward_from_chat.title} (ID: {channel_id}) –¥–æ–±–∞–≤–ª–µ–Ω –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞")
            except Exception as e :
                bot.reply_to(message, f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ø—Ä–∞–≤ –±–æ—Ç–∞: {str(e)}")
        else :
            bot.reply_to(message, "‚ùå –ü–µ—Ä–µ—à–ª–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ –∫–∞–Ω–∞–ª–∞ –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /add_channel_id [ID_–∫–∞–Ω–∞–ª–∞]")
    except Exception as e :
        handle_error(message.chat.id, e)


@bot.message_handler(commands=['remove_channel'])
def remove_channel(message) :
    if not is_main_admin(message.chat.id) :
        bot.reply_to(message, "‚ùå –≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –≥–ª–∞–≤–Ω–æ–º—É –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É")
        return

    try :
        if not storage.channels_to_monitor :
            bot.reply_to(message, "‚ÑπÔ∏è –ù–µ—Ç –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã—Ö –∫–∞–Ω–∞–ª–æ–≤")
            return

        markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
        for channel_id in storage.channels_to_monitor :
            try :
                chat = bot.get_chat(channel_id)
                markup.add(f"{chat.title} (ID: {channel_id})")
            except :
                markup.add(f"ID: {channel_id}")
        markup.add('‚ùå –û—Ç–º–µ–Ω–∞')

        msg = bot.reply_to(message, "–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞–Ω–∞–ª –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –∏–∑ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞:", reply_markup=markup)
        bot.register_next_step_handler(msg, process_remove_channel)
    except Exception as e :
        handle_error(message.chat.id, e)


def process_remove_channel(message) :
    try :
        if message.text == '‚ùå –û—Ç–º–µ–Ω–∞' :
            bot.send_message(message.chat.id, "‚ùå –û—Ç–º–µ–Ω–∞", reply_markup=types.ReplyKeyboardRemove())
            return

        channel_id = None
        if '(' in message.text and ')' in message.text :
            id_part = message.text.split('(')[1].split(')')[0]
            if id_part.startswith('ID: ') :
                channel_id = int(id_part[4 :])
        elif message.text.startswith('ID: ') :
            channel_id = int(message.text[4 :])

        if channel_id is None or channel_id not in storage.channels_to_monitor :
            bot.send_message(message.chat.id, "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä –∫–∞–Ω–∞–ª–∞", reply_markup=types.ReplyKeyboardRemove())
            return

        storage.channels_to_monitor.remove(channel_id)
        bot.send_message(message.chat.id, f"‚úÖ –ö–∞–Ω–∞–ª —É–¥–∞–ª–µ–Ω –∏–∑ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞", reply_markup=types.ReplyKeyboardRemove())
    except Exception as e :
        handle_error(message.chat.id, e)


@bot.message_handler(func=lambda m : m.text == 'üì¢ –°—Ç–∞—Ç—É—Å –ø–∞—Ä—Å–∏–Ω–≥–∞' and is_main_admin(m.chat.id))
def chat_monitoring_status(message) :
    try :
        status = "üü¢ –ê–∫—Ç–∏–≤–µ–Ω"
        text = f"üì¢ –°—Ç–∞—Ç—É—Å –ø–∞—Ä—Å–∏–Ω–≥–∞:\n\n{status}\n\n"
        text += f"–ü–æ–¥–ø–∏—Å—á–∏–∫–æ–≤ –Ω–∞ —Ä–∞—Å—Å—ã–ª–∫—É: {len(storage.subscribed_users)}\n"
        text += f"–û—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã—Ö –∫–∞–Ω–∞–ª–æ–≤: {len(storage.channels_to_monitor)}\n\n"

        if storage.channels_to_monitor :
            text += "–°–ø–∏—Å–æ–∫ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã—Ö –∫–∞–Ω–∞–ª–æ–≤:\n"
            for channel_id in storage.channels_to_monitor :
                try :
                    chat = bot.get_chat(channel_id)
                    text += f"- {chat.title} (ID: {channel_id})\n"
                except Exception as e :
                    text += f"- ID: {channel_id} (–Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é)\n"

        text += "\n–î–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫–∞–Ω–∞–ª–∞:\n1. –ü–µ—Ä–µ—à–ª–∏—Ç–µ –ª—é–±–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ –∫–∞–Ω–∞–ª–∞ –∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ /add_channel\n2. –ò–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ–º–∞–Ω–¥—É /add_channel_id [ID_–∫–∞–Ω–∞–ª–∞]\n\n–î–ª—è —É–¥–∞–ª–µ–Ω–∏—è –∫–∞–Ω–∞–ª–∞ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /remove_channel"

        bot.send_message(message.chat.id, text)
    except Exception as e :
        handle_error(message.chat.id, e)

@bot.message_handler(func=lambda m: m.text == '‚è∞ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è–º–∏' and is_main_admin(m.chat.id))
def reminder_settings_menu(message):
    try:
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
        markup.add('üìù –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ç–µ–∫—Å—Ç –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è', 'üîÑ –ò–∑–º–µ–Ω–∏—Ç—å —á–∞—Å—Ç–æ—Ç—É')
        markup.add('üëÅ –ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ç–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏', '‚¨ÖÔ∏è –ù–∞–∑–∞–¥')

        bot.send_message(
            message.chat.id,
            "‚è∞ –ú–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è–º–∏:",
            reply_markup=markup
        )
    except Exception as e:
        handle_error(message.chat.id, e)


@bot.message_handler(func=lambda m : m.text in ['üìù –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ç–µ–∫—Å—Ç –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è', 'üîÑ –ò–∑–º–µ–Ω–∏—Ç—å —á–∞—Å—Ç–æ—Ç—É',
                                                'üëÅ –ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ç–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏', '‚¨ÖÔ∏è –ù–∞–∑–∞–¥']
                                     and is_main_admin(m.chat.id))
def handle_reminder_settings(message) :
    try :
        if message.text == 'üìù –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ç–µ–∫—Å—Ç –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è' :
            msg = bot.send_message(
                message.chat.id,
                "‚úèÔ∏è –í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è:",
                reply_markup=types.ReplyKeyboardRemove()
            )
            bot.register_next_step_handler(msg, process_reminder_text)

        elif message.text == 'üîÑ –ò–∑–º–µ–Ω–∏—Ç—å —á–∞—Å—Ç–æ—Ç—É' :
            markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
            markup.add('1 –Ω–µ–¥–µ–ª—è', '2 –Ω–µ–¥–µ–ª–∏', '3 –Ω–µ–¥–µ–ª–∏')
            markup.add('‚ùå –û—Ç–º–µ–Ω–∞')
            msg = bot.send_message(
                message.chat.id,
                "–í—ã–±–µ—Ä–∏—Ç–µ —á–∞—Å—Ç–æ—Ç—É –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π:",
                reply_markup=markup
            )
            bot.register_next_step_handler(msg, process_reminder_frequency)

        elif message.text == 'üëÅ –ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ç–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏' :
            frequency_text = {
                1 : "1 –Ω–µ–¥–µ–ª—è",
                2 : "2 –Ω–µ–¥–µ–ª–∏",
                3 : "3 –Ω–µ–¥–µ–ª–∏"
            }.get(storage.reminder_frequency, "–ù–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ")

            text = (
                f"‚è∞ –¢–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π:\n\n"
                f"üìù –¢–µ–∫—Å—Ç: {storage.reminder_text if storage.reminder_text else '–ù–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω'}\n"
                f"üîÑ –ß–∞—Å—Ç–æ—Ç–∞: {frequency_text}\n"
                f"üìÖ –ü–æ—Å–ª–µ–¥–Ω—è—è –æ—Ç–ø—Ä–∞–≤–∫–∞: {storage.last_reminder_sent.strftime('%Y-%m-%d %H:%M') if storage.last_reminder_sent else '–ï—â–µ –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª—è–ª–æ—Å—å'}"
            )
            bot.send_message(message.chat.id, text)

        elif message.text == '‚¨ÖÔ∏è –ù–∞–∑–∞–¥' :
            admin_menu(message)
    except Exception as e :
        handle_error(message.chat.id, e)


def process_reminder_text(message) :
    try :
        storage.reminder_text = message.text
        bot.send_message(
            message.chat.id,
            "‚úÖ –¢–µ–∫—Å—Ç –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω",
            reply_markup=types.ReplyKeyboardRemove()
        )
        reminder_settings_menu(message)
    except Exception as e :
        handle_error(message.chat.id, e)


def process_reminder_frequency(message) :
    try :
        if message.text == '‚ùå –û—Ç–º–µ–Ω–∞' :
            reminder_settings_menu(message)
            return

        if message.text == '1 –Ω–µ–¥–µ–ª—è' :
            storage.reminder_frequency = 1
        elif message.text == '2 –Ω–µ–¥–µ–ª–∏' :
            storage.reminder_frequency = 2
        elif message.text == '3 –Ω–µ–¥–µ–ª–∏' :
            storage.reminder_frequency = 3
        else :
            bot.send_message(message.chat.id, "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä")
            reminder_settings_menu(message)
            return

        bot.send_message(
            message.chat.id,
            f"‚úÖ –ß–∞—Å—Ç–æ—Ç–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞: {message.text}",
            reply_markup=types.ReplyKeyboardRemove()
        )
        reminder_settings_menu(message)
    except Exception as e :
        handle_error(message.chat.id, e)

def send_reminders():
    try:
        if not storage.reminder_text or not storage.subscribed_users:
            return

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω—É–∂–Ω–æ –ª–∏ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ
        if storage.last_reminder_sent:
            delta = datetime.now() - storage.last_reminder_sent
            days_needed = storage.reminder_frequency * 7
            if delta.days < days_needed:
                return

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è
        for user_id in storage.subscribed_users:
            try:
                bot.send_message(
                    user_id,
                    f"‚è∞ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ:\n\n{storage.reminder_text}"
                )
            except Exception as e:
                print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {str(e)}")
                storage.subscribed_users.discard(user_id)

        storage.last_reminder_sent = datetime.now()
        print(f"–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã {datetime.now().strftime('%Y-%m-%d %H:%M')}")
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –≤ send_reminders: {str(e)}")
        traceback.print_exc()

def mailing_scheduler_thread():
    while True:
        try:
            schedule.run_pending()
            send_reminders()  # –î–æ–±–∞–≤–ª—è–µ–º –≤—ã–∑–æ–≤ —Ñ—É–Ω–∫—Ü–∏–∏ –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π
            time.sleep(1)
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –≤ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–µ: {str(e)}")
            time.sleep(5)

def show_review_menu(chat_id, message_text) :
    try :
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
        markup.add('‚úÖ –û—Ç–ø—Ä–∞–≤–∏—Ç—å', '‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å')
        msg = bot.send_message(
            chat_id,
            message_text,
            reply_markup=markup
        )
        bot.register_next_step_handler(msg, process_review_step)
    except Exception as e :
        handle_error(chat_id, e)


def process_review_step(message) :
    try :
        chat_id = message.chat.id
        if chat_id not in storage.user_data :
            bot.send_message(chat_id, "‚åõÔ∏è –°–µ—Å—Å–∏—è —É—Å—Ç–∞—Ä–µ–ª–∞. –ù–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ —Å /start")
            return

        user = storage.user_data[chat_id]

        if message.text == '‚úÖ –û—Ç–ø—Ä–∞–≤–∏—Ç—å' :
            if user.option == 'event' :
                complete_event_registration(chat_id)
            else :
                complete_vacancy_application(chat_id)
        elif message.text == '‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å' :
            user.reviewing = True
            show_edit_menu(chat_id)
        else :
            bot.send_message(chat_id, "‚ö†Ô∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏")
            show_review_menu(chat_id, user.get_summary())
    except Exception as e :
        handle_error(chat_id, e)


def show_edit_menu(chat_id):
    try:
        user = storage.user_data[chat_id]
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True)

        if user.option == 'event':
            buttons = [
                '‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å –§–ò–û', 'üì± –ò–∑–º–µ–Ω–∏—Ç—å —Ç–µ–ª–µ—Ñ–æ–Ω',
                'üéØ –ò–∑–º–µ–Ω–∏—Ç—å –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ', 'ü™™ –ò–∑–º–µ–Ω–∏—Ç—å –ø—Ä–æ–ø—É—Å–∫',
                'üë§ –ò–∑–º–µ–Ω–∏—Ç—å username'
            ]
        else:
            buttons = [
                '‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å –§–ò–û', 'üì± –ò–∑–º–µ–Ω–∏—Ç—å —Ç–µ–ª–µ—Ñ–æ–Ω',
                'üíº –ò–∑–º–µ–Ω–∏—Ç—å –≤–∞–∫–∞–Ω—Å–∏—é', 'üìù –ò–∑–º–µ–Ω–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–µ–±–µ',
                'üìé –ò–∑–º–µ–Ω–∏—Ç—å CV', 'üë§ –ò–∑–º–µ–Ω–∏—Ç—å username'
            ]

        for button in buttons:
            markup.add(button)

        markup.add('‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ –ø—Ä–æ—Å–º–æ—Ç—Ä—É')

        msg = bot.send_message(
            chat_id,
            "üîß –ß—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å?",
            reply_markup=markup
        )
        bot.register_next_step_handler(msg, handle_edit_selection)
    except Exception as e:
        handle_error(chat_id, e)

def handle_edit_selection(message):
    try:
        chat_id = message.chat.id
        user = storage.user_data[chat_id]

        if message.text == '‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ –ø—Ä–æ—Å–º–æ—Ç—Ä—É':
            user.reviewing = False
            show_review_menu(chat_id, user.get_summary())
            return

        if '–§–ò–û' in message.text:
            user.step = 'edit_name'
            msg = bot.send_message(chat_id, "‚úèÔ∏è –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –§–ò–û:", reply_markup=types.ReplyKeyboardRemove())
            bot.register_next_step_handler(msg, process_edit_step)
        elif '—Ç–µ–ª–µ—Ñ–æ–Ω' in message.text:
            user.step = 'edit_phone'
            msg = bot.send_message(chat_id, "üì± –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π —Ç–µ–ª–µ—Ñ–æ–Ω:", reply_markup=types.ReplyKeyboardRemove())
            bot.register_next_step_handler(msg, process_edit_step)
        elif '–º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ' in message.text:
            user.step = 'edit_event'
            msg = bot.send_message(chat_id, "üéØ –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ:", reply_markup=types.ReplyKeyboardRemove())
            bot.register_next_step_handler(msg, process_edit_step)
        elif '–≤–∞–∫–∞–Ω—Å–∏—é' in message.text:
            user.step = 'edit_vacancy'
            msg = bot.send_message(chat_id, "üíº –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—É—é –≤–∞–∫–∞–Ω—Å–∏—é:", reply_markup=types.ReplyKeyboardRemove())
            bot.register_next_step_handler(msg, process_edit_step)
        elif '–∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–µ–±–µ' in message.text:
            user.step = 'edit_about'
            msg = bot.send_message(chat_id, "üìù –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–µ–±–µ:",
                                   reply_markup=types.ReplyKeyboardRemove())
            bot.register_next_step_handler(msg, process_edit_step)
        elif '–ø—Ä–æ–ø—É—Å–∫' in message.text:
            user.step = 'edit_pass'
            markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
            markup.add('–î–∞', '–ù–µ—Ç')
            msg = bot.send_message(chat_id, "ü™™ –ù—É–∂–µ–Ω –ª–∏ –≤–∞–º –ø—Ä–æ–ø—É—Å–∫?", reply_markup=markup)
            bot.register_next_step_handler(msg, process_edit_step)
        elif 'CV' in message.text:
            user.step = 'edit_cv'
            msg = bot.send_message(chat_id, "üìé –ü—Ä–∏–∫—Ä–µ–ø–∏—Ç–µ –Ω–æ–≤–æ–µ CV (—Ñ–∞–π–ª PDF –∏–ª–∏ DOCX):",
                                   reply_markup=types.ReplyKeyboardRemove())
            bot.register_next_step_handler(msg, process_edit_step)
        elif 'username' in message.text:
            user.step = 'edit_username'
            msg = bot.send_message(chat_id, "üë§ –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π username (–±–µ–∑ @):",
                                   reply_markup=types.ReplyKeyboardRemove())
            bot.register_next_step_handler(msg, process_edit_step)
        else:
            bot.send_message(chat_id, "‚ö†Ô∏è –ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä")
            show_edit_menu(chat_id)
    except Exception as e:
        handle_error(chat_id, e)

def process_edit_step(message):
    try:
        chat_id = message.chat.id
        user = storage.user_data[chat_id]

        if user.step == 'edit_name':
            user.name = message.text
        elif user.step == 'edit_phone':
            user.phone = message.text
        elif user.step == 'edit_event':
            user.event_or_vacancy = message.text
        elif user.step == 'edit_vacancy':
            user.event_or_vacancy = message.text
        elif user.step == 'edit_about':
            user.about = message.text
        elif user.step == 'edit_pass':
            user.needs_pass = message.text.lower() in ['–¥–∞', 'yes']
        elif user.step == 'edit_cv':
            if message.document:
                user.cv_file_id = message.document.file_id
            else:
                msg = bot.send_message(chat_id, "‚ö†Ô∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–∏–∫—Ä–µ–ø–∏—Ç–µ —Ñ–∞–π–ª")
                bot.register_next_step_handler(msg, process_edit_step)
                return
        elif user.step == 'edit_username':
            username = message.text.strip()
            if username.startswith('@'):
                username = username[1:]
            user.username = username if username else None

        user.reviewing = False
        show_review_menu(chat_id, user.get_summary())
    except Exception as e:
        handle_error(chat_id, e)


@bot.message_handler(func=lambda m: m.text == '–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –Ω–∞ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ' and not is_admin(m.chat.id))
def start_event_registration(message):
    try:
        storage.user_data[message.chat.id] = UserData()
        storage.user_data[message.chat.id].option = 'event'
        storage.user_data[message.chat.id].step = 'name'
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º username, –µ—Å–ª–∏ –æ–Ω –µ—Å—Ç—å
        storage.user_data[message.chat.id].username = message.from_user.username
        msg = bot.reply_to(message, "‚úèÔ∏è –í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –§–ò–û:", reply_markup=types.ReplyKeyboardRemove())
        bot.register_next_step_handler(msg, process_name_step)
    except Exception as e:
        handle_error(message.chat.id, e)



def process_name_step(message) :
    try :
        chat_id = message.chat.id
        storage.user_data[chat_id].name = message.text
        storage.user_data[chat_id].step = 'phone'
        msg = bot.reply_to(message, "üì± –í–≤–µ–¥–∏—Ç–µ –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞:")
        bot.register_next_step_handler(msg, process_phone_step)
    except Exception as e :
        handle_error(message.chat.id, e)


def process_phone_step(message) :
    try :
        chat_id = message.chat.id
        storage.user_data[chat_id].phone = message.text

        if storage.user_data[chat_id].option == 'event' :
            storage.user_data[chat_id].step = 'event'
            msg = bot.reply_to(message, "üéØ –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è, –Ω–∞ –∫–æ—Ç–æ—Ä–æ–µ —Ö–æ—Ç–∏—Ç–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è (–º–æ–∂–Ω–æ –æ—Ä–∏–µ–Ω—Ç–∏—Ä–æ–≤–∞—Ç—å—Å—è –Ω–∞ –Ω–∞–∑–≤–∞–Ω–∏–µ, —É–∫–∞–∑–∞–Ω–Ω–æ–µ –≤ –ø–æ—Å—Ç–µ –∫–∞–Ω–∞–ª–∞):")
            bot.register_next_step_handler(msg, process_event_step)
        else :
            storage.user_data[chat_id].step = 'vacancy'
            msg = bot.reply_to(message, "üíº –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≤–∞–∫–∞–Ω—Å–∏–∏, –∫–æ—Ç–æ—Ä–∞—è –≤–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç (–º–æ–∂–Ω–æ –æ—Ä–∏–µ–Ω—Ç–∏—Ä–æ–≤–∞—Ç—å—Å—è –Ω–∞ –Ω–∞–∑–≤–∞–Ω–∏–µ, —É–∫–∞–∑–∞–Ω–Ω–æ–µ –≤ –ø–æ—Å—Ç–µ –∫–∞–Ω–∞–ª–∞):")
            bot.register_next_step_handler(msg, process_vacancy_step)
    except Exception as e :
        handle_error(message.chat.id, e)


def process_event_step(message) :
    try :
        chat_id = message.chat.id
        storage.user_data[chat_id].event_or_vacancy = message.text
        storage.user_data[chat_id].step = 'pass'

        markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
        markup.add('–î–∞', '–ù–µ—Ç')
        msg = bot.reply_to(message, "ü™™ –ù—É–∂–µ–Ω –ª–∏ –≤–∞–º –ø—Ä–æ–ø—É—Å–∫ –≤ –ù–ò–£ –í–®–≠?\n–í—ã–±–µ—Ä–∏—Ç–µ –Ω–µ—Ç, –µ—Å–ª–∏ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ –æ–Ω–ª–∞–π–Ω", reply_markup=markup)
        bot.register_next_step_handler(msg, process_pass_step)
    except Exception as e :
        handle_error(message.chat.id, e)


def process_pass_step(message) :
    try :
        chat_id = message.chat.id
        storage.user_data[chat_id].needs_pass = message.text.lower() in ['–¥–∞', 'yes']
        show_review_menu(chat_id, storage.user_data[chat_id].get_summary())
    except Exception as e :
        handle_error(message.chat.id, e)


@bot.message_handler(func=lambda m: m.text == '–ü—Ä–∏—Å–ª–∞—Ç—å CV –¥–ª—è –≤–∞–∫–∞–Ω—Å–∏–∏' and not is_admin(m.chat.id))
def start_vacancy_application(message):
    try:
        storage.user_data[message.chat.id] = UserData()
        storage.user_data[message.chat.id].option = 'vacancy'
        storage.user_data[message.chat.id].step = 'name'
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º username, –µ—Å–ª–∏ –æ–Ω –µ—Å—Ç—å
        storage.user_data[message.chat.id].username = message.from_user.username
        msg = bot.reply_to(message, "‚úèÔ∏è –í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –§–ò–û:", reply_markup=types.ReplyKeyboardRemove())
        bot.register_next_step_handler(msg, process_name_step)
    except Exception as e:
        handle_error(message.chat.id, e)


def process_vacancy_step(message) :
    try :
        chat_id = message.chat.id
        storage.user_data[chat_id].event_or_vacancy = message.text
        storage.user_data[chat_id].step = 'about'
        msg = bot.reply_to(message, "üìù –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–ø–∏—à–∏—Ç–µ –Ω–µ—Å–∫–æ–ª—å–∫–æ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π, –ø–æ—á–µ–º—É –≤–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç –¥–∞–Ω–Ω–∞—è –≤–∞–∫–∞–Ω—Å–∏—è –∏ –ø–æ—á–µ–º—É –≤—ã —Å—á–∏—Ç–∞–µ—Ç–µ —Å–µ–±—è –ø–æ–¥—Ö–æ–¥—è—â–∏–º –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–º:")
        bot.register_next_step_handler(msg, process_about_step)
    except Exception as e :
        handle_error(message.chat.id, e)


def process_about_step(message) :
    try :
        chat_id = message.chat.id
        storage.user_data[chat_id].about = message.text
        storage.user_data[chat_id].step = 'cv'
        msg = bot.reply_to(message, "üìé –ü—Ä–∏–∫—Ä–µ–ø–∏—Ç–µ –≤–∞—à–µ CV (—Ñ–∞–π–ª PDF –∏–ª–∏ DOCX):")
        bot.register_next_step_handler(msg, process_cv_step)
    except Exception as e :
        handle_error(message.chat.id, e)


def process_cv_step(message) :
    try :
        chat_id = message.chat.id
        if message.document :
            storage.user_data[chat_id].cv_file_id = message.document.file_id
            show_review_menu(chat_id, storage.user_data[chat_id].get_summary())
        else :
            msg = bot.reply_to(message, "‚ö†Ô∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–∞–π–ª")
            bot.register_next_step_handler(msg, process_cv_step)
    except Exception as e :
        handle_error(message.chat.id, e)


def complete_event_registration(chat_id):
    try:
        user = storage.user_data[chat_id]

        registration_data = {
            '–§–ò–û': user.name,
            'Username': f"@{user.username}" if user.username else "–Ω–µ —É–∫–∞–∑–∞–Ω",
            '–¢–µ–ª–µ—Ñ–æ–Ω': user.phone,
            '–ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ': user.event_or_vacancy,
            '–ü—Ä–æ–ø—É—Å–∫': '–î–∞' if user.needs_pass else '–ù–µ—Ç',
            '–î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏': datetime.now().strftime('%Y-%m-%d %H:%M')
        }
        storage.event_registrations.append(registration_data)

        bot.send_message(
            chat_id,
            f"üéâ –°–ø–∞—Å–∏–±–æ –∑–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é!\n\n{user.get_summary()}",
            reply_markup=types.ReplyKeyboardRemove()
        )

        for admin_id in list(storage.admins.keys()):
            try:
                bot.send_message(
                    admin_id,
                    f"üìù –°–ø–∞—Å–∏–±–æ, –º—ã –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–ª–∏ –≤–∞—Å –Ω–∞ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ! ‚úÖ\n–ó–∞ –≤—Å–µ–º–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è–º–∏ –≤—ã –º–æ–∂–µ—Ç–µ —Å–ª–µ–¥–∏—Ç—å –≤ –∫–∞–Ω–∞–ª–µ https://t.me/hsecareercenter:\n"
                    f"üë§ –§–ò–û: {user.name}\n"
                    f"üë§ Username: @{user.username if user.username else '–Ω–µ —É–∫–∞–∑–∞–Ω'}\n"
                    f"üì± –¢–µ–ª–µ—Ñ–æ–Ω: {user.phone}\n"
                    f"üéØ –ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ: {user.event_or_vacancy}\n"
                    f"ü™™ –ü—Ä–æ–ø—É—Å–∫: {'–î–∞' if user.needs_pass else '–ù–µ—Ç'}"
                )
            except Exception as e:
                print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω—É {admin_id}: {str(e)}")

        del storage.user_data[chat_id]
        user_menu(chat_id)
    except Exception as e:
        handle_error(chat_id, e)

def complete_vacancy_application(chat_id):
    try:
        user = storage.user_data[chat_id]

        application_data = {
            '–§–ò–û': user.name,
            'Username': f"@{user.username}" if user.username else "–Ω–µ —É–∫–∞–∑–∞–Ω",
            '–¢–µ–ª–µ—Ñ–æ–Ω': user.phone,
            '–í–∞–∫–∞–Ω—Å–∏—è': user.event_or_vacancy,
            '–û —Å–µ–±–µ': user.about,
            '–î–∞—Ç–∞ –ø–æ–¥–∞—á–∏': datetime.now().strftime('%Y-%m-%d %H:%M')
        }
        storage.vacancy_applications.append(application_data)

        bot.send_message(
            chat_id,
            f"üéâ –°–ø–∞—Å–∏–±–æ –∑–∞ –≤–∞—à–µ —Ä–µ–∑—é–º–µ!\n\n{user.get_summary()}",
            reply_markup=types.ReplyKeyboardRemove()
        )

        for admin_id in list(storage.admins.keys()):
            try:
                bot.send_message(
                    admin_id,
                    f"üìÑ –°–ø–∞—Å–∏–±–æ! –ú—ã –ø—Ä–∏–Ω—è–ª–∏ –≤–∞—à—É –∑–∞—è–≤–∫—É –Ω–∞ –≤–∞–∫–∞–Ω—Å–∏—é! –í —Å–ª—É—á–∞–µ, –µ—Å–ª–∏ –≤–∞—à–∞ –∫–∞–Ω–¥–∏–¥–∞—Ç—É—Ä–∞ –∑–∞–∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç —Ä–∞–±–æ—Ç–æ–¥–∞—Ç–µ–ª—è, –º—ã –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ —Å –≤–∞–º–∏ —Å–≤—è–∂–µ–º—Å—è ‚úÖ:\n"
                    f"üë§ –§–ò–û: {user.name}\n"
                    f"üë§ Username: @{user.username if user.username else '–Ω–µ —É–∫–∞–∑–∞–Ω'}\n"
                    f"üì± –¢–µ–ª–µ—Ñ–æ–Ω: {user.phone}\n"
                    f"üíº –í–∞–∫–∞–Ω—Å–∏—è: {user.event_or_vacancy}\n"
                    f"üìù –û —Å–µ–±–µ: {user.about}"
                )
                if user.cv_file_id:
                    bot.send_document(admin_id, user.cv_file_id)
            except Exception as e:
                print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω—É {admin_id}: {str(e)}")

        del storage.user_data[chat_id]
        user_menu(chat_id)
    except Exception as e:
        handle_error(chat_id, e)


def complete_vacancy_application(chat_id) :
    try :
        user = storage.user_data[chat_id]

        application_data = {
            '–§–ò–û' : user.name,
            '–¢–µ–ª–µ—Ñ–æ–Ω' : user.phone,
            'Username' : f"@{user.username}" if user.username else "–Ω–µ —É–∫–∞–∑–∞–Ω",
            '–í–∞–∫–∞–Ω—Å–∏—è' : user.event_or_vacancy,
            '–û —Å–µ–±–µ' : user.about,
            '–î–∞—Ç–∞ –ø–æ–¥–∞—á–∏' : datetime.now().strftime('%Y-%m-%d %H:%M')
        }
        storage.vacancy_applications.append(application_data)

        bot.send_message(
            chat_id,
            f"üéâ –°–ø–∞—Å–∏–±–æ –∑–∞ –≤–∞—à–µ —Ä–µ–∑—é–º–µ!\n\n{user.get_summary()}",
            reply_markup=types.ReplyKeyboardRemove()
        )

        for admin_id in list(storage.admins.keys()) :
            try :
                bot.send_message(
                    admin_id,
                    f"üìÑ –ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ –Ω–∞ –≤–∞–∫–∞–Ω—Å–∏—é:\n"
                    f"üë§ –§–ò–û: {user.name}\n"
                    f"üì± –¢–µ–ª–µ—Ñ–æ–Ω: {user.phone}\n"
                    f"üë§ Username: @{user.username if user.username else '–Ω–µ —É–∫–∞–∑–∞–Ω'}\n"
                    f"üíº –í–∞–∫–∞–Ω—Å–∏—è: {user.event_or_vacancy}\n"
                    f"üìù –û —Å–µ–±–µ: {user.about}"
                )
                if user.cv_file_id :
                    bot.send_document(admin_id, user.cv_file_id)
            except Exception as e :
                print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω—É {admin_id}: {str(e)}")

        del storage.user_data[chat_id]
        user_menu(chat_id)
    except Exception as e :
        handle_error(chat_id, e)


@bot.message_handler(func=lambda m : m.text == 'üìä –ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–π' and is_admin(m.chat.id))
def send_excel_report(message) :
    try :
        if not storage.event_registrations :
            bot.send_message(message.chat.id, "‚ÑπÔ∏è –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è—Ö")
            return

        filename = f"registrations_{datetime.now().strftime('%Y%m%d_%H%M')}.xlsx"
        pd.DataFrame(storage.event_registrations).to_excel(filename, index=False)

        with open(filename, 'rb') as file :
            bot.send_document(message.chat.id, file, caption="üìä –°–ø–∏—Å–æ–∫ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–π")

        os.remove(filename)
    except Exception as e :
        handle_error(message.chat.id, e)


@bot.message_handler(func=lambda m : m.text == 'üìß –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ä–∞—Å—Å—ã–ª–∫–æ–π' and is_main_admin(m.chat.id))
def mailing_settings_menu(message) :
    try :
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
        markup.add('üîò –í–∫–ª—é—á–∏—Ç—å/–≤—ã–∫–ª—é—á–∏—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É', 'üìÖ –ò–∑–º–µ–Ω–∏—Ç—å –¥–µ–Ω—å —Ä–∞—Å—Å—ã–ª–∫–∏')
        markup.add('‚è∞ –ò–∑–º–µ–Ω–∏—Ç—å –≤—Ä–µ–º—è —Ä–∞—Å—Å—ã–ª–∫–∏', '‚¨ÖÔ∏è –ù–∞–∑–∞–¥')

        status = "–≤–∫–ª—é—á–µ–Ω–∞" if storage.mailing_settings['enabled'] else "–≤—ã–∫–ª—é—á–µ–Ω–∞"
        days = ['–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫', '–í—Ç–æ—Ä–Ω–∏–∫', '–°—Ä–µ–¥–∞', '–ß–µ—Ç–≤–µ—Ä–≥', '–ü—è—Ç–Ω–∏—Ü–∞', '–°—É–±–±–æ—Ç–∞', '–í–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ']
        day = days[storage.mailing_settings['day_of_week']]

        text = f"üìß –¢–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Ä–∞—Å—Å—ã–ª–∫–∏:\n\nüîò –°—Ç–∞—Ç—É—Å: {status}\nüìÖ –î–µ–Ω—å: {day}\n‚è∞ –í—Ä–µ–º—è: {storage.mailing_settings['time']}"
        bot.send_message(message.chat.id, text, reply_markup=markup)
    except Exception as e :
        handle_error(message.chat.id, e)


@bot.message_handler(func=lambda m : m.text in ['üîò –í–∫–ª—é—á–∏—Ç—å/–≤—ã–∫–ª—é—á–∏—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É', 'üìÖ –ò–∑–º–µ–Ω–∏—Ç—å –¥–µ–Ω—å —Ä–∞—Å—Å—ã–ª–∫–∏',
                                                '‚è∞ –ò–∑–º–µ–Ω–∏—Ç—å –≤—Ä–µ–º—è —Ä–∞—Å—Å—ã–ª–∫–∏', '‚¨ÖÔ∏è –ù–∞–∑–∞–¥'] and is_main_admin(m.chat.id))
def handle_mailing_settings(message) :
    try :
        if message.text == 'üîò –í–∫–ª—é—á–∏—Ç—å/–≤—ã–∫–ª—é—á–∏—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É' :
            storage.mailing_settings['enabled'] = not storage.mailing_settings['enabled']
            schedule_mailing()
            status = "–≤–∫–ª—é—á–µ–Ω–∞" if storage.mailing_settings['enabled'] else "–≤—ã–∫–ª—é—á–µ–Ω–∞"
            bot.send_message(message.chat.id, f"‚úÖ –†–∞—Å—Å—ã–ª–∫–∞ —Ç–µ–ø–µ—Ä—å {status}")
            mailing_settings_menu(message)

        elif message.text == 'üìÖ –ò–∑–º–µ–Ω–∏—Ç—å –¥–µ–Ω—å —Ä–∞—Å—Å—ã–ª–∫–∏' :
            markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
            days = ['–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫', '–í—Ç–æ—Ä–Ω–∏–∫', '–°—Ä–µ–¥–∞', '–ß–µ—Ç–≤–µ—Ä–≥', '–ü—è—Ç–Ω–∏—Ü–∞', '–°—É–±–±–æ—Ç–∞', '–í–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ']
            for day in days :
                markup.add(day)
            markup.add('‚ùå –û—Ç–º–µ–Ω–∞')
            msg = bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–≤—ã–π –¥–µ–Ω—å –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏:", reply_markup=markup)
            bot.register_next_step_handler(msg, process_day_change)

        elif message.text == '‚è∞ –ò–∑–º–µ–Ω–∏—Ç—å –≤—Ä–µ–º—è —Ä–∞—Å—Å—ã–ª–∫–∏' :
            msg = bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –≤—Ä–µ–º—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ß–ß:–ú–ú (–Ω–∞–ø—Ä–∏–º–µ—Ä, 14:30):",
                                   reply_markup=types.ReplyKeyboardRemove())
            bot.register_next_step_handler(msg, process_time_change)

        elif message.text == '‚¨ÖÔ∏è –ù–∞–∑–∞–¥' :
            admin_menu(message)
    except Exception as e :
        handle_error(message.chat.id, e)


def process_day_change(message) :
    try :
        if message.text == '‚ùå –û—Ç–º–µ–Ω–∞' :
            mailing_settings_menu(message)
            return

        days = ['–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫', '–í—Ç–æ—Ä–Ω–∏–∫', '–°—Ä–µ–¥–∞', '–ß–µ—Ç–≤–µ—Ä–≥', '–ü—è—Ç–Ω–∏—Ü–∞', '–°—É–±–±–æ—Ç–∞', '–í–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ']
        if message.text in days :
            storage.mailing_settings['day_of_week'] = days.index(message.text)
            schedule_mailing()
            bot.send_message(message.chat.id, f"‚úÖ –î–µ–Ω—å —Ä–∞—Å—Å—ã–ª–∫–∏ –∏–∑–º–µ–Ω—ë–Ω –Ω–∞ {message.text}")
        else :
            bot.send_message(message.chat.id, "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –¥–µ–Ω—å")

        mailing_settings_menu(message)
    except Exception as e :
        handle_error(message.chat.id, e)


def process_time_change(message) :
    try :
        time_str = message.text
        datetime.strptime(time_str, '%H:%M')
        storage.mailing_settings['time'] = time_str
        schedule_mailing()
        bot.send_message(message.chat.id, f"‚úÖ –í—Ä–µ–º—è —Ä–∞—Å—Å—ã–ª–∫–∏ –∏–∑–º–µ–Ω–µ–Ω–æ –Ω–∞ {time_str}")
        mailing_settings_menu(message)
    except ValueError :
        bot.send_message(message.chat.id, "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ß–ß:–ú–ú")
        mailing_settings_menu(message)
    except Exception as e :
        handle_error(message.chat.id, e)


@bot.message_handler(func=lambda m : m.text == 'üë• –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º–∏' and is_main_admin(m.chat.id))
def admins_management_menu(message) :
    try :
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
        markup.add('‚ûï –î–æ–±–∞–≤–∏—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞', '‚ûñ –£–¥–∞–ª–∏—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞')
        markup.add('üìã –°–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤', '‚¨ÖÔ∏è –ù–∞–∑–∞–¥')
        bot.send_message(message.chat.id, "üë• –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º–∏:", reply_markup=markup)
    except Exception as e :
        handle_error(message.chat.id, e)


@bot.message_handler(func=lambda m : m.text in ['‚ûï –î–æ–±–∞–≤–∏—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞', '‚ûñ –£–¥–∞–ª–∏—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞',
                                                'üìã –°–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤', '‚¨ÖÔ∏è –ù–∞–∑–∞–¥'] and is_main_admin(m.chat.id))
def handle_admin_management(message) :
    try :
        if message.text == '‚ûï –î–æ–±–∞–≤–∏—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞' :
            msg = bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ ID –Ω–æ–≤–æ–≥–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞(–º–æ–∂–Ω–æ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ç—É—Ç https://t.me/username_to_id_bot):",
                                   reply_markup=types.ReplyKeyboardRemove())
            bot.register_next_step_handler(msg, process_add_admin)

        elif message.text == '‚ûñ –£–¥–∞–ª–∏—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞' :
            if len(storage.admins) <= 1 :
                bot.send_message(message.chat.id, "‚ùå –ù–µ–ª—å–∑—è —É–¥–∞–ª–∏—Ç—å –≤—Å–µ—Ö –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤")
                return

            markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
            for admin_id in storage.admins :
                if message.text in storage.admins and str(message.text) not in MAIN_ADMIN_IDS:
                    markup.add(admin_id)
            markup.add('‚ùå –û—Ç–º–µ–Ω–∞')
            msg = bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:", reply_markup=markup)
            bot.register_next_step_handler(msg, process_remove_admin)

        elif message.text == 'üìã –°–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤' :
            text = "üë• –°–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤:\n\n"
            for admin_id, admin_type in storage.admins.items() :
                text += f"{admin_id} ({'–≥–ª–∞–≤–Ω—ã–π' if admin_type == 'main' else '–æ–±—ã—á–Ω—ã–π'})\n"
            bot.send_message(message.chat.id, text)

        elif message.text == '‚¨ÖÔ∏è –ù–∞–∑–∞–¥' :
            admin_menu(message)
    except Exception as e :
        handle_error(message.chat.id, e)


def process_add_admin(message) :
    try :
        new_admin_id = message.text.strip()
        if not new_admin_id.isdigit() :
            bot.send_message(message.chat.id, "‚ùå ID –¥–æ–ª–∂–µ–Ω —Å–æ—Å—Ç–æ—è—Ç—å —Ç–æ–ª—å–∫–æ –∏–∑ —Ü–∏—Ñ—Ä")
            return

        if new_admin_id in storage.admins :
            bot.send_message(message.chat.id, "‚ö†Ô∏è –≠—Ç–æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä")
        else :
            storage.admins[new_admin_id] = 'regular'
            bot.send_message(message.chat.id, f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {new_admin_id} –¥–æ–±–∞–≤–ª–µ–Ω –∫–∞–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä")

        admins_management_menu(message)
    except Exception as e :
        handle_error(message.chat.id, e)


def process_remove_admin(message) :
    try :
        if message.text == '‚ùå –û—Ç–º–µ–Ω–∞' :
            admins_management_menu(message)
            return

        if message.text in storage.admins and message.text != MAIN_ADMIN_IDS :
            del storage.admins[message.text]
            bot.send_message(message.chat.id, f"‚úÖ –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä {message.text} —É–¥–∞–ª—ë–Ω")
        else :
            bot.send_message(message.chat.id, "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞")

        admins_management_menu(message)
    except Exception as e :
        handle_error(message.chat.id, e)


@bot.channel_post_handler(content_types=['text', 'photo', 'document', 'video'])
def handle_channel_post(message) :
    try :
        print(f"–ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ –∫–∞–Ω–∞–ª–∞ {message.chat.id} ({message.chat.title})")

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∫–∞–Ω–∞–ª –≤ —Å–ø–∏—Å–∫–µ –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
        if message.chat.id not in storage.channels_to_monitor :
            print(f"–ö–∞–Ω–∞–ª {message.chat.id} –Ω–µ –≤ —Å–ø–∏—Å–∫–µ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞")
            return

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –µ—â–µ –Ω–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–ª–æ—Å—å
        if message.message_id in storage.parsed_messages :
            print(f"–°–æ–æ–±—â–µ–Ω–∏–µ {message.message_id} —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ")
            return

        storage.parsed_messages.add(message.message_id)

        # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
        text = message.text if message.text else message.caption if message.caption else "üì¢ –ù–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ –∫–∞–Ω–∞–ª–∞"

        # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫—É –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
        markup = types.InlineKeyboardMarkup()
        markup.add(types.InlineKeyboardButton('–ó–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ', callback_data='register_from_chat'))

        # –†–∞—Å—Å—ã–ª–∞–µ–º –ø–æ–¥–ø–∏—Å—á–∏–∫–∞–º
        for user_id in storage.subscribed_users :
            try :
                if message.photo :
                    bot.send_photo(
                        user_id,
                        message.photo[-1].file_id,
                        caption=f"{text}\n\nüìç –ö–∞–Ω–∞–ª: {message.chat.title}",
                        reply_markup=markup
                    )
                elif message.document :
                    bot.send_document(
                        user_id,
                        message.document.file_id,
                        caption=f"{text}\n\nüìç –ö–∞–Ω–∞–ª: {message.chat.title}",
                        reply_markup=markup
                    )
                elif message.video :
                    bot.send_video(
                        user_id,
                        message.video.file_id,
                        caption=f"{text}\n\nüìç –ö–∞–Ω–∞–ª: {message.chat.title}",
                        reply_markup=markup
                    )
                else :
                    bot.send_message(
                        user_id,
                        f"üì¢ –°–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ –∫–∞–Ω–∞–ª–∞ '{message.chat.title}':\n\n{text}",
                        reply_markup=markup
                    )
                print(f"–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}")
            except Exception as e :
                print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {str(e)}")
                storage.subscribed_users.discard(user_id)

        # –û—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—ã–µ ID —Å–æ–æ–±—â–µ–Ω–∏–π
        if len(storage.parsed_messages) > 1000 :
            oldest = sorted(storage.parsed_messages)[:100]
            storage.parsed_messages = set(sorted(storage.parsed_messages)[100 :])

        print("–°–æ–æ–±—â–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ")
    except Exception as e :
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∏–∑ –∫–∞–Ω–∞–ª–∞: {str(e)}")
        traceback.print_exc()


@bot.message_handler(content_types=['text', 'photo', 'document', 'video'],
                     func=lambda m : m.chat.type in ['group', 'supergroup'])
def handle_group_messages(message) :
    try :
        print(f"–ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ –≥—Ä—É–ø–ø—ã {message.chat.id} ({message.chat.title})")

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –±–æ—Ç –∞–¥–º–∏–Ω –≤ —ç—Ç–æ–º —á–∞—Ç–µ
        try :
            chat_member = bot.get_chat_member(message.chat.id, bot.get_me().id)
            if chat_member.status not in ['administrator', 'creator'] :
                print(f"–ë–æ—Ç –Ω–µ –∞–¥–º–∏–Ω –≤ —á–∞—Ç–µ {message.chat.id}")
                return
        except Exception as e :
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ø—Ä–∞–≤ –±–æ—Ç–∞ –≤ —á–∞—Ç–µ {message.chat.id}: {str(e)}")
            return

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –µ—â–µ –Ω–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–ª–æ—Å—å
        if message.message_id in storage.parsed_messages :
            print(f"–°–æ–æ–±—â–µ–Ω–∏–µ {message.message_id} —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ")
            return

        storage.parsed_messages.add(message.message_id)

        # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
        text = message.text if message.text else message.caption if message.caption else "üì¢ –ù–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ"



        # –†–∞—Å—Å—ã–ª–∞–µ–º –ø–æ–¥–ø–∏—Å—á–∏–∫–∞–º
        for user_id in storage.subscribed_users :
            try :
                if message.photo :
                    bot.send_photo(
                        user_id,
                        message.photo[-1].file_id,
                        caption=f"{text}\n\nüìç –ß–∞—Ç: {message.chat.title}",
                    )
                elif message.document :
                    bot.send_document(
                        user_id,
                        message.document.file_id,
                        caption=f"{text}\n\nüìç –ß–∞—Ç: {message.chat.title}",
                                            )
                elif message.video :
                    bot.send_video(
                        user_id,
                        message.video.file_id,
                        caption=f"{text}\n\nüìç –ß–∞—Ç: {message.chat.title}",
                                            )
                else :
                    bot.send_message(
                        user_id,
                        f"üì¢ –°–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ —á–∞—Ç–∞ '{message.chat.title}':\n\n{text}",
                                        )
                print(f"–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}")
            except Exception as e :
                print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {str(e)}")
                storage.subscribed_users.discard(user_id)

        # –û—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—ã–µ ID —Å–æ–æ–±—â–µ–Ω–∏–π
        if len(storage.parsed_messages) > 1000 :
            oldest = sorted(storage.parsed_messages)[:100]
            storage.parsed_messages = set(sorted(storage.parsed_messages)[100 :])

        print("–°–æ–æ–±—â–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ")
    except Exception as e :
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∏–∑ —á–∞—Ç–∞: {str(e)}")
        traceback.print_exc()


@bot.callback_query_handler(func=lambda call : call.data == 'register_from_chat')
def handle_register_from_chat(call) :
    try :
        bot.answer_callback_query(call.id)
        start_event_registration(call.message)
    except Exception as e :
        handle_error(call.message.chat.id, e)


@bot.message_handler(func=lambda message : True)
def handle_unknown(message) :
    try :
        if message.chat.id in storage.user_data and storage.user_data[message.chat.id].reviewing :
            return

        if is_admin(message.chat.id) :
            if message.text in ['üìä –ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–π', 'üìß –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ä–∞—Å—Å—ã–ª–∫–æ–π',
                                'üë• –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º–∏', 'üì¢ –°—Ç–∞—Ç—É—Å –ø–∞—Ä—Å–∏–Ω–≥–∞'] :
                return
            bot.send_message(message.chat.id, "‚ÑπÔ∏è –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞")
        else :
            bot.send_message(message.chat.id, "‚ÑπÔ∏è –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é –∏–ª–∏ /start")
    except Exception as e :
        handle_error(message.chat.id, e)


if __name__ == '__main__' :
    # –î–æ–±–∞–≤–∏–º —Ç–µ—Å—Ç–æ–≤—ã–π –∫–∞–Ω–∞–ª –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ (–º–æ–∂–Ω–æ —É–¥–∞–ª–∏—Ç—å)
    TEST_CHANNEL_ID =  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã–π ID –≤–∞—à–µ–≥–æ –∫–∞–Ω–∞–ª–∞
    storage.channels_to_monitor.add(TEST_CHANNEL_ID)
    print(f"–î–æ–±–∞–≤–ª–µ–Ω —Ç–µ—Å—Ç–æ–≤—ã–π –∫–∞–Ω–∞–ª –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞: {TEST_CHANNEL_ID}")

    schedule_mailing()

    scheduler_thread = threading.Thread(target=mailing_scheduler_thread)
    scheduler_thread.daemon = True
    scheduler_thread.start()

    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
    try :
        bot.infinity_polling()
    except Exception as e :
        print(f"–û—à–∏–±–∫–∞ –≤ –æ—Å–Ω–æ–≤–Ω–æ–º –ø–æ—Ç–æ–∫–µ: {str(e)}")
        traceback.print_exc()